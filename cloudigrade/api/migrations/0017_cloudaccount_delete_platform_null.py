# Generated by Django 3.0.4 on 2020-04-01 18:06

import logging

from django.db import migrations, models

logger = logging.getLogger(__name__)


def delete_cloudaccounts(apps, schema_editor):
    """Delete all CloudAccount objects with missing platform data."""
    CloudAccount = apps.get_model("api", "CloudAccount")
    Instance = apps.get_model("api", "Instance")
    MachineImage = apps.get_model("api", "MachineImage")
    InstanceEvent = apps.get_model("api", "InstanceEvent")

    cloudaccount_filter = (
        models.Q(platform_application_id__isnull=True)
        | models.Q(platform_authentication_id__isnull=True)
        | models.Q(platform_endpoint_id__isnull=True)
        | models.Q(platform_source_id__isnull=True)
    )
    cloudaccounts = CloudAccount.objects.filter(cloudaccount_filter)
    for cloudaccount in cloudaccounts:
        # It would be nice to use the real CloudAccount.__repr__ method here,
        # but since we're in a migration, we don't have access to the "real" class.
        logger.warning(
            "Deleting CloudAccount %s (name='%s', user_id=%s)",
            cloudaccount.id,
            cloudaccount.name,
            cloudaccount.user_id,
        )
        cloudaccount.delete()

    # We need to clean up orphaned MachineImages since that's normally done in a
    # post-delete signal handler.

    # This is a very crude pattern for finding orphaned objects, and it would not scale
    # well to very large data sets, but it's good enough for us now since we know we
    # have a relatively small data cardinality.
    instances = Instance.objects.all()
    machineimage_ids = [instance.machine_image_id for instance in instances]
    machineimages = MachineImage.objects.all().exclude(id__in=machineimage_ids)
    for machineimage in machineimages:
        logger.warning(
            "Deleting MachineImage %s (name='%s')", machineimage.id, machineimage.name
        )
        machineimage.delete()

    # Because GenericRelationship objects are linked in software, not via DB relations,
    # we also need to delete AwsCloudAccount, AwsInstance, and AwsMachineImage objects
    # that were orphaned by the above deletes.

    # Normally this would warrant content object type checking, but since we only
    # have one type currently, we can always assume it's AwsCloudAccount.
    cloudaccounts = CloudAccount.objects.all()
    object_ids = [cloudaccount.object_id for cloudaccount in cloudaccounts]
    AwsCloudAccount = apps.get_model("api", "AwsCloudAccount")
    awscloudaccounts = AwsCloudAccount.objects.all().exclude(id__in=object_ids)
    for awscloudaccount in awscloudaccounts:
        logger.warning(
            "Deleting AwsCloudAccount %s (aws_account_id='%s', account_arn='%s')",
            awscloudaccount.id,
            awscloudaccount.aws_account_id,
            awscloudaccount.account_arn,
        )
        awscloudaccount.delete()

    # Normally this would warrant content object type checking, but since we only
    # have one type currently, we can always assume it's AwsInstance.
    instances = Instance.objects.all()
    object_ids = [instance.object_id for instance in instances]
    AwsInstance = apps.get_model("api", "AwsInstance")
    awsinstances = AwsInstance.objects.all().exclude(id__in=object_ids)
    for awsinstance in awsinstances:
        logger.warning(
            "Deleting AwsInstance %s (ec2_instance_id='%s')",
            awsinstance.id,
            awsinstance.ec2_instance_id,
        )
        awsinstance.delete()

    # Normally this would warrant content object type checking, but since we only
    # have one type currently, we can always assume it's AwsMachineImage.
    machineimages = MachineImage.objects.all()
    object_ids = [machineimage.object_id for machineimage in machineimages]
    AwsMachineImage = apps.get_model("api", "AwsMachineImage")
    awsmachineimages = AwsMachineImage.objects.all().exclude(id__in=object_ids)
    for awsmachineimage in awsmachineimages:
        logger.warning(
            "Deleting AwsMachineImage %s (ec2_ami_id='%s', owner_aws_account_id='%s')",
            awsmachineimage.id,
            awsmachineimage.ec2_ami_id,
            awsmachineimage.owner_aws_account_id,
        )
        awsmachineimage.delete()

    # Normally this would warrant content object type checking, but since we only
    # have one type currently, we can always assume it's AwsInstanceEvent.
    instanceevents = InstanceEvent.objects.all()
    object_ids = [instanceevent.object_id for instanceevent in instanceevents]
    AwsInstanceEvent = apps.get_model("api", "AwsInstanceEvent")
    awsinstanceevents = AwsInstanceEvent.objects.all().exclude(id__in=object_ids)
    for awsinstanceevent in awsinstanceevents:
        logger.warning(
            "Deleting AwsInstanceEvent %s (instance_type='%s')",
            awsinstanceevent.id,
            awsinstanceevent.instance_type,
        )
        awsinstanceevent.delete()


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0016_merge_20200323_1556"),
    ]

    operations = [
        migrations.RunPython(delete_cloudaccounts),
    ]
