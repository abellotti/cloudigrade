### STAGES ###
stages:
  - test
  - build
  - review
  - deploy
  - release

### GLOBAL VARS ###
variables:
  SHIFTIGRADE_IMAGE: registry.gitlab.com/cloudigrade/shiftigrade
  SHIFTIGRADE_VERSION: 0.3.0
  IMAGE_NAME: registry.gitlab.com/${CI_PROJECT_PATH}
  DOCKER_DRIVER: overlay2

### TEST STAGE ###
py37:
  stage: test
  image: registry.gitlab.com/cloudigrade/images/build-container:latest
  except:
    - chat
    - trigger
  before_script:
    - pip install tox codecov poetry
  script:
    - tox -e py37
    - codecov

flake8:
  stage: test
  image: registry.gitlab.com/cloudigrade/images/build-container:latest
  except:
    - chat
    - trigger
  before_script:
    - pip install tox poetry
  script: tox -e flake8

vulnerability:
  stage: test
  image: registry.gitlab.com/cloudigrade/images/build-container:latest
  variables:
    PYCURL_SSL_LIBRARY: openssl
  except:
    - chat
    - trigger
  before_script:
    - pip install poetry safety
  script:
    - poetry install
    - safety check

Cloudigrade Docker:
  stage: test
  image: docker:stable
  except:
    - chat
    - trigger
  services:
    - docker:dind
  script:
    - docker pull ${IMAGE_NAME}:latest || true
    - docker build --cache-from ${IMAGE_NAME}:latest .

NGINX S2i:
  stage: test
  image: docker:stable
  except:
    - chat
    - trigger
  services:
    - docker:dind
  variables:
    CONTEXT_DIR: deployment/nginx/
    NGINX_S2I_IMAGE: centos/nginx-112-centos7:latest
    S2I_VERSION: v1.1.10
    S2I_RELEASE: source-to-image-v1.1.10-27f0729d-linux-amd64
  before_script:
    - apk --no-cache add git
    - mkdir /opt && cd /opt
    - wget https://github.com/openshift/source-to-image/releases/download/${S2I_VERSION}/${S2I_RELEASE}.tar.gz -O /opt/s2i.tar.gz
    - tar --strip-components=1 -xzvf /opt/s2i.tar.gz -C /opt/
    - mv /opt/s2i /usr/bin/
  script:
    - s2i build --context-dir=${CONTEXT_DIR} --ref ${CI_COMMIT_REF_NAME} ${CI_PROJECT_URL} ${NGINX_S2I_IMAGE} ${IMAGE_NAME}:latest

Spec File:
  stage: test
  image: registry.gitlab.com/cloudigrade/images/build-container:latest
  except:
    - chat
    - trigger
  before_script:
    - pip install poetry
    - poetry install
  script:
    - AWS_SQS_ACCESS_KEY_ID=foo AWS_SQS_SECRET_ACCESS_KEY=bar poetry run make spec-test

### REVIEW STAGE ###
Deploy Review:
  stage: review
  image: ${SHIFTIGRADE_IMAGE}:${SHIFTIGRADE_VERSION}
  variables:
    GIT_STRATEGY: none
  only:
    - branches@cloudigrade/cloudigrade
  except:
    - master@cloudigrade/cloudigrade
    - tags@cloudigrade/cloudigrade
    - chat
    - trigger
  before_script:
    - oc login --token ${KUBE_TOKEN}
    - oc project cloudigrade-ci
    - cd /opt/shiftigrade
  script:
    - export API_ROUTE_HOST=review-${CI_COMMIT_REF_SLUG}.5a9f.insights-dev.openshiftapps.com
    - export AUTH_ROUTE_HOST=review-${CI_COMMIT_REF_SLUG}.5a9f.insights-dev.openshiftapps.com
    - export DEPLOYMENT_PREFIX=$(echo review-${CI_COMMIT_REF_SLUG} | cut -c 1-36)
    - export DB_SECRETS_FILE_NAME=${DEPLOYMENT_PREFIX}-db
    - export DJANGO_DATABASE_HOST=${DEPLOYMENT_PREFIX}-db.${OPENSHIFT_PROJECT}.svc
    - >
      ansible-playbook \
        -e application_name=houndigrade \
        -e aws_prefix="${CI_COMMIT_REF_SLUG}" \
        -e ec2_ami_id="${RECOMMENDED_AMI}" \
        -e ec2_asg_availability_zones="${HOUNDIGRADE_AWS_AVAILABILITY_ZONE}" \
        -e ec2_asg_desired_capacity=0 \
        -e ec2_asg_max_size=0 \
        -e ec2_asg_min_size=0 \
        -e ec2_asg_name="${HOUNDIGRADE_AWS_AUTOSCALING_GROUP_NAME}" \
        -e ec2_asg_vpc_subnets="${SUBNET_NAME}" \
        -e ec2_instance_name="${EC2_HOST_NAME}" \
        -e ec2_instance_type="${INSTANCE_TYPE}" \
        -e ec2_launch_configuration_name="${HOUNDIGRADE_LAUNCH_CONFIG_NAME}" \
        -e ec2_security_groups="${SECURITY_GROUP_NAME}" \
        -e ecs_cluster_name="${HOUNDIGRADE_ECS_CLUSTER_NAME}" \
        -e key_name="${SSH_KEY_NAME}" \
        -e vpc_name="${VPC_NAME}" \
        -e bucket_name="${AWS_S3_BUCKET_NAME}" \
        ansible/provision-aws-resources.yaml
    - >
      if ! oc rollout status dc/${DEPLOYMENT_PREFIX}-db; then
        oc process openshift//postgresql-ephemeral \
          -p DATABASE_SERVICE_NAME=${DEPLOYMENT_PREFIX}-db \
          -p POSTGRESQL_DATABASE=postgres \
          -p POSTGRESQL_VERSION=9.6 \
          -l app=${CI_COMMIT_REF_SLUG} \
        | oc apply -f - && \
        oc rollout status dc/${DEPLOYMENT_PREFIX}-db;
      else
        echo "${DEPLOYMENT_PREFIX}-db already exists, keeping."
      fi
    - kontemplate template ocp/review.yaml -i cloudigrade | oc apply -f -
    - oc start-build -F c-${DEPLOYMENT_PREFIX}-api
    - oc start-build -F c-${DEPLOYMENT_PREFIX}-nginx
    - if ! oc rollout status dc/c-${DEPLOYMENT_PREFIX}-a; then oc rollout latest dc/c-${DEPLOYMENT_PREFIX}-a && oc rollout status dc/c-${DEPLOYMENT_PREFIX}-a; fi;
    - oc rsh -c c-${DEPLOYMENT_PREFIX}-a $(oc get pods -o jsonpath='{.items[*].metadata.name}' -l name=c-${DEPLOYMENT_PREFIX}-a) python3 manage.py seed_review_data || true
    - if ! oc rollout status dc/c-${DEPLOYMENT_PREFIX}-b; then oc rollout latest dc/c-${DEPLOYMENT_PREFIX}-b && oc rollout status dc/c-${DEPLOYMENT_PREFIX}-b; fi;
    - if ! oc rollout status dc/c-${DEPLOYMENT_PREFIX}-w; then oc rollout latest dc/c-${DEPLOYMENT_PREFIX}-w && oc rollout status dc/c-${DEPLOYMENT_PREFIX}-w; fi;
    - if ! oc rollout status dc/c-${DEPLOYMENT_PREFIX}-l; then oc rollout latest dc/c-${DEPLOYMENT_PREFIX}-l && oc rollout status dc/c-${DEPLOYMENT_PREFIX}-l; fi;
  environment:
    name: review/${CI_COMMIT_REF_NAME}
    url: https://qa.cloud.paas.psi.redhat.com/api/cloudigrade/v2/
    on_stop: Clean Up Review

Clean Up Review:
  stage: review
  image: ${SHIFTIGRADE_IMAGE}:${SHIFTIGRADE_VERSION}
  variables:
    GIT_STRATEGY: none
  only:
    - branches@cloudigrade/cloudigrade
  except:
    - master@cloudigrade/cloudigrade
    - tags@cloudigrade/cloudigrade
    - chat
    - trigger
  before_script:
    - oc login ${OPENSHIFT_URL} --token ${KUBE_TOKEN}
    - oc project cloudigrade-ci
    - cd /opt/shiftigrade
  script:
    - export DEPLOYMENT_PREFIX=$(echo review-${CI_COMMIT_REF_SLUG} | cut -c 1-36)
    - export DJANGO_DATABASE_HOST=${DEPLOYMENT_PREFIX}-db.${OPENSHIFT_PROJECT}.svc
    - oc delete bc,cm,dc,is,routes,secrets,svc -l gitlab-deployment="${CI_COMMIT_REF_SLUG}-cloudigrade"
    - oc delete dc,svc,secret "${DEPLOYMENT_PREFIX}-db"
    - >
      ansible-playbook \
        -e aws_prefix="${CI_COMMIT_REF_SLUG}" \
        -e bucket_state=absent \
        -e ec2_asg_name="${HOUNDIGRADE_AWS_AUTOSCALING_GROUP_NAME}" \
        -e ec2_asg_state=absent \
        -e ec2_launch_configuration_name="${HOUNDIGRADE_LAUNCH_CONFIG_NAME}" \
        -e ec2_lc_state=absent \
        -e ecs_cluster_name="${HOUNDIGRADE_ECS_CLUSTER_NAME}" \
        -e ecs_state=absent \
        -e sqs_state=absent \
        ansible/provision-aws-resources.yaml
    - ansible-playbook -e aws_prefix="review-${CI_COMMIT_REF_SLUG}" -e sqs_state=absent ansible/clean-sqs.yaml
  when: manual
  environment:
    name: review/${CI_COMMIT_REF_NAME}
    action: stop
