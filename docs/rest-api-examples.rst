REST API Example Usage
======================

This document summarizes some examples of the cloudigrade REST API.

..
    This document can be regenerated by a developer using the following
    make target from the root directory of a sandbox environment having
    database ports forwarded locally:

    make docs-api-examples

    Please note that this is a destructive operation because building the data
    for the document requires creating, updating, and deleting many objects.

Examples here use the ``http`` command from
`httpie <https://httpie.org/>`_. If you want to follow along with these
exact commands, you may need to ``brew install httpie`` or
``pip install httpie`` first.

These examples also assume you are running cloudigrade on
``localhost:8080`` either via ``docker-compose`` or Django’s built-in
``runserver`` command and that you have correctly configured
cloudigrade’s environment with appropriate variables to allow it to talk
to the various clouds (e.g. ``AWS_ACCESS_KEY_ID``).

Authorization
-------------

As mentioned in `README.md <../README.md>`_, all API calls require an
``Authorization`` header. For convenience, these examples assume you
have an environment variable set like this with an appropriate token
value:

.. code:: bash

    AUTH=Authorization:"Token d1fa223f753e45dd8e311cf84ee2635b0fae5bd8"

Overview
--------

The following resource paths are currently available:

-  ``/api/v1/account/`` returns account data
-  ``/api/v1/event/`` returns event data
-  ``/api/v1/instance/`` returns instance data
-  ``/api/v1/image/`` returns image data
-  ``/api/v1/sysconfig/`` returns sysconfig data
-  ``/api/v1/user/`` returns user data
-  ``/api/v1/report/instances/`` returns daily instance usage data
-  ``/api/v1/report/accounts/`` returns account overview data
-  ``/api/v1/report/images/`` returns active images overview data
-  ``/auth/`` is for authentication

User Setup
------------------

This is for users with Cloudigrade itself, not telling Cloudigrade
about a user's AWS account.

Users cannot be created directly through the API. Please use the Django Admin to
create users.


Login to Cloudigrade
~~~~~~~~~~~~~~~~~~~~

Request:

.. code:: bash

    http post localhost:8080/auth/token/create/ "${AUTH}" \
        username="customer@example.com" \
        password="very-secure-password"

Response:

::

    HTTP/1.1 200 OK
    Allow: POST, OPTIONS
    Content-Length: 78
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "auth_token": "8e6afc0bcf64f15d140bbf43db9817ca2d7d80c7",
        "is_superuser": false
    }

The `auth_token` should be used in the `Authorization:` HTTP header.


Log out of Cloudigrade
~~~~~~~~~~~~~~~~~~~~~~

Request:

.. code:: bash

    http post localhost:8080/auth/token/destroy/ "${AUTH}"

Response:

::

    HTTP/1.1 204 No Content
    Allow: POST, OPTIONS
    Content-Length: 0
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    null


Customer Account Setup
----------------------

Create an AWS account
~~~~~~~~~~~~~~~~~~~~~

This request may take a few seconds because of multiple round-trip calls
to the AWS APIs for each region. The "name" attribute is required and has a
maximum supported length of 256 characters.

Request:

.. code:: bash

    http post localhost:8080/api/v1/account/ "${AUTH}" \
        account_arn="arn:aws:iam::692917929955:role/role-for-cloudigrade" \
        name="yet another account" \
        resourcetype="AwsAccount"

Response:

::

    HTTP/1.1 201 Created
    Allow: GET, POST, HEAD, OPTIONS
    Content-Length: 310
    Content-Type: application/json
    Location: localhost:8080/api/v1/account/27/
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "account_arn": "arn:aws:iam::692917929955:role/role-for-cloudigrade",
        "aws_account_id": "692917929955",
        "created_at": "2019-01-21T22:46:01.717898Z",
        "id": 27,
        "name": "yet another account",
        "resourcetype": "AwsAccount",
        "updated_at": "2019-01-21T22:46:01.717921Z",
        "url": "http://localhost:8080/api/v1/account/27/",
        "user_id": 18
    }

If you attempt to create an AWS account for an ARN that is already in
the system, you should get a 400 error.

Request:

.. code:: bash

    http post localhost:8080/api/v1/account/ "${AUTH}" \
        account_arn="arn:aws:iam::692917929955:role/role-for-cloudigrade" \
        name="but this account already exists" \
        resourcetype="AwsAccount"

Response:

::

    HTTP/1.1 400 Bad Request
    Allow: GET, POST, HEAD, OPTIONS
    Content-Length: 69
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "account_arn": [
            "aws account with this account arn already exists."
        ]
    }


Customer Account Info
---------------------

List all accounts
~~~~~~~~~~~~~~~~~

Request:

.. code:: bash

    http localhost:8080/api/v1/account/ "${AUTH}"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, POST, HEAD, OPTIONS
    Content-Length: 668
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "count": 2,
        "next": null,
        "previous": null,
        "results": [
            {
                "account_arn": "arn:aws:iam::457240925779:role/role-for-cloudigrade",
                "aws_account_id": "457240925779",
                "created_at": "2019-01-07T00:00:00Z",
                "id": 26,
                "name": "greatest account ever",
                "resourcetype": "AwsAccount",
                "updated_at": "2019-01-21T22:46:01.193938Z",
                "url": "http://localhost:8080/api/v1/account/26/",
                "user_id": 18
            },
            {
                "account_arn": "arn:aws:iam::692917929955:role/role-for-cloudigrade",
                "aws_account_id": "692917929955",
                "created_at": "2019-01-21T22:46:01.717898Z",
                "id": 27,
                "name": "yet another account",
                "resourcetype": "AwsAccount",
                "updated_at": "2019-01-21T22:46:01.717921Z",
                "url": "http://localhost:8080/api/v1/account/27/",
                "user_id": 18
            }
        ]
    }


Retrieve a specific account
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Request:

.. code:: bash

    http localhost:8080/api/v1/account/27/ "${AUTH}"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS
    Content-Length: 310
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "account_arn": "arn:aws:iam::692917929955:role/role-for-cloudigrade",
        "aws_account_id": "692917929955",
        "created_at": "2019-01-21T22:46:01.717898Z",
        "id": 27,
        "name": "yet another account",
        "resourcetype": "AwsAccount",
        "updated_at": "2019-01-21T22:46:01.717921Z",
        "url": "http://localhost:8080/api/v1/account/27/",
        "user_id": 18
    }


Update a specific account
~~~~~~~~~~~~~~~~~~~~~~~~~

You can update the account object via either HTTP PATCH or HTTP PUT. All
updates require you to specify the "resourcetype".

At the time of this writing, only the "name" property can be changed on the
account object.

Request:

.. code:: bash

    http patch localhost:8080/api/v1/account/27/ "${AUTH}" \
        name="name updated using PATCH" \
        resourcetype="AwsAccount"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS
    Content-Length: 315
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "account_arn": "arn:aws:iam::692917929955:role/role-for-cloudigrade",
        "aws_account_id": "692917929955",
        "created_at": "2019-01-21T22:46:01.717898Z",
        "id": 27,
        "name": "name updated using PATCH",
        "resourcetype": "AwsAccount",
        "updated_at": "2019-01-21T22:46:01.839612Z",
        "url": "http://localhost:8080/api/v1/account/27/",
        "user_id": 18
    }

Because PUT is intended to replace objects, it must include all potentially
writable fields, which includes "name" and "account_arn".

Request:

.. code:: bash

    http put localhost:8080/api/v1/account/27/ "${AUTH}" \
        name="name updated using PUT" \
        account_arn="arn:aws:iam::692917929955:role/role-for-cloudigrade" \
        resourcetype="AwsAccount"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS
    Content-Length: 313
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "account_arn": "arn:aws:iam::692917929955:role/role-for-cloudigrade",
        "aws_account_id": "692917929955",
        "created_at": "2019-01-21T22:46:01.717898Z",
        "id": 27,
        "name": "name updated using PUT",
        "resourcetype": "AwsAccount",
        "updated_at": "2019-01-21T22:46:01.864390Z",
        "url": "http://localhost:8080/api/v1/account/27/",
        "user_id": 18
    }

You cannot change the ARN via PUT or PATCH.

Request:

.. code:: bash

    http patch localhost:8080/api/v1/account/27/ "${AUTH}" \
        account_arn="arn:aws:iam::999999999999:role/role-for-cloudigrade" \
        resourcetype="AwsAccount"

Response:

::

    HTTP/1.1 400 Bad Request
    Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS
    Content-Length: 49
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "account_arn": [
            "You cannot change this field."
        ]
    }


Instance Info
-------------

List all instances
~~~~~~~~~~~~~~~~~~

Request:

.. code:: bash

    http localhost:8080/api/v1/instance/ "${AUTH}"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, HEAD, OPTIONS
    Content-Length: 947
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "count": 3,
        "next": null,
        "previous": null,
        "results": [
            {
                "account": "http://localhost:8080/api/v1/account/26/",
                "account_id": 26,
                "created_at": "2019-01-21T22:46:01.199293Z",
                "ec2_instance_id": "i-c6f8f0d9fb0503fb2",
                "id": 34,
                "region": "us-east-2",
                "resourcetype": "AwsInstance",
                "updated_at": "2019-01-21T22:46:01.199316Z",
                "url": "http://localhost:8080/api/v1/instance/34/"
            },
            {
                "account": "http://localhost:8080/api/v1/account/26/",
                "account_id": 26,
                "created_at": "2019-01-21T22:46:01.207632Z",
                "ec2_instance_id": "i-48a067ac7e4212576",
                "id": 35,
                "region": "us-east-1",
                "resourcetype": "AwsInstance",
                "updated_at": "2019-01-21T22:46:01.207657Z",
                "url": "http://localhost:8080/api/v1/instance/35/"
            },
            {
                "account": "http://localhost:8080/api/v1/account/26/",
                "account_id": 26,
                "created_at": "2019-01-21T22:46:01.218231Z",
                "ec2_instance_id": "i-8522d63298e259bdc",
                "id": 36,
                "region": "ap-northeast-1",
                "resourcetype": "AwsInstance",
                "updated_at": "2019-01-21T22:46:01.218258Z",
                "url": "http://localhost:8080/api/v1/instance/36/"
            }
        ]
    }


Retrieve a specific instance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Request:

.. code:: bash

    http localhost:8080/api/v1/instance/34/ "${AUTH}"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, HEAD, OPTIONS
    Content-Length: 296
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "account": "http://localhost:8080/api/v1/account/26/",
        "account_id": 26,
        "created_at": "2019-01-21T22:46:01.199293Z",
        "ec2_instance_id": "i-c6f8f0d9fb0503fb2",
        "id": 34,
        "region": "us-east-2",
        "resourcetype": "AwsInstance",
        "updated_at": "2019-01-21T22:46:01.199316Z",
        "url": "http://localhost:8080/api/v1/instance/34/"
    }


Filtering instances
~~~~~~~~~~~~~~~~~~~

You may include an optional "user_id" query string argument to filter results
down to a specific user.

Request:

.. code:: bash

    http localhost:8080/api/v1/instance/ "${AUTH}" \
        user_id=="17"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, HEAD, OPTIONS
    Content-Length: 351
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "count": 1,
        "next": null,
        "previous": null,
        "results": [
            {
                "account": "http://localhost:8080/api/v1/account/25/",
                "account_id": 25,
                "created_at": "2019-01-21T22:46:01.149975Z",
                "ec2_instance_id": "i-ef357126523478f75",
                "id": 33,
                "region": "ca-central-1",
                "resourcetype": "AwsInstance",
                "updated_at": "2019-01-21T22:46:01.149999Z",
                "url": "http://localhost:8080/api/v1/instance/33/"
            }
        ]
    }


Instance Event Info
-------------------

List all events
~~~~~~~~~~~~~~~

Request:

.. code:: bash

    http localhost:8080/api/v1/event/ "${AUTH}"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, HEAD, OPTIONS
    Content-Length: 2054
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "count": 6,
        "next": null,
        "previous": null,
        "results": [
            {
                "event_type": "power_on",
                "id": 58,
                "instance": "http://localhost:8080/api/v1/instance/34/",
                "instance_id": 34,
                "instance_type": "r4.large",
                "machineimage": "http://localhost:8080/api/v1/image/26/",
                "machineimage_id": 26,
                "occurred_at": "2019-01-14T00:00:00Z",
                "resourcetype": "AwsInstanceEvent",
                "subnet": "subnet-75ad3536",
                "url": "http://localhost:8080/api/v1/event/58/"
            },
            {
                "event_type": "power_off",
                "id": 59,
                "instance": "http://localhost:8080/api/v1/instance/34/",
                "instance_id": 34,
                "instance_type": "r4.large",
                "machineimage": null,
                "machineimage_id": null,
                "occurred_at": "2019-01-19T00:00:00Z",
                "resourcetype": "AwsInstanceEvent",
                "subnet": "subnet-75ad3536",
                "url": "http://localhost:8080/api/v1/event/59/"
            },
            {
                "event_type": "power_on",
                "id": 60,
                "instance": "http://localhost:8080/api/v1/instance/34/",
                "instance_id": 34,
                "instance_type": "r4.large",
                "machineimage": "http://localhost:8080/api/v1/image/26/",
                "machineimage_id": 26,
                "occurred_at": "2019-01-20T00:00:00Z",
                "resourcetype": "AwsInstanceEvent",
                "subnet": "subnet-75ad3536",
                "url": "http://localhost:8080/api/v1/event/60/"
            },
            {
                "event_type": "power_on",
                "id": 61,
                "instance": "http://localhost:8080/api/v1/instance/35/",
                "instance_id": 35,
                "instance_type": "c5.xlarge",
                "machineimage": "http://localhost:8080/api/v1/image/27/",
                "machineimage_id": 27,
                "occurred_at": "2019-01-14T00:00:00Z",
                "resourcetype": "AwsInstanceEvent",
                "subnet": "subnet-0e681bcf",
                "url": "http://localhost:8080/api/v1/event/61/"
            },
            {
                "event_type": "power_off",
                "id": 62,
                "instance": "http://localhost:8080/api/v1/instance/35/",
                "instance_id": 35,
                "instance_type": "c5.xlarge",
                "machineimage": null,
                "machineimage_id": null,
                "occurred_at": "2019-01-19T00:00:00Z",
                "resourcetype": "AwsInstanceEvent",
                "subnet": "subnet-0e681bcf",
                "url": "http://localhost:8080/api/v1/event/62/"
            },
            {
                "event_type": "power_on",
                "id": 63,
                "instance": "http://localhost:8080/api/v1/instance/35/",
                "instance_id": 35,
                "instance_type": "c5.xlarge",
                "machineimage": "http://localhost:8080/api/v1/image/27/",
                "machineimage_id": 27,
                "occurred_at": "2019-01-20T00:00:00Z",
                "resourcetype": "AwsInstanceEvent",
                "subnet": "subnet-0e681bcf",
                "url": "http://localhost:8080/api/v1/event/63/"
            }
        ]
    }


Retrieve a specific event
~~~~~~~~~~~~~~~~~~~~~~~~~

Request:

.. code:: bash

    http localhost:8080/api/v1/event/58/ "${AUTH}"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, HEAD, OPTIONS
    Content-Length: 342
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "event_type": "power_on",
        "id": 58,
        "instance": "http://localhost:8080/api/v1/instance/34/",
        "instance_id": 34,
        "instance_type": "r4.large",
        "machineimage": "http://localhost:8080/api/v1/image/26/",
        "machineimage_id": 26,
        "occurred_at": "2019-01-14T00:00:00Z",
        "resourcetype": "AwsInstanceEvent",
        "subnet": "subnet-75ad3536",
        "url": "http://localhost:8080/api/v1/event/58/"
    }


Filtering events
~~~~~~~~~~~~~~~~

You may include an optional "instance_id" query string argument to filter results
down to a specific instance.

Request:

.. code:: bash

    http localhost:8080/api/v1/event/ "${AUTH}" \
        instance_id=="34"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, HEAD, OPTIONS
    Content-Length: 1051
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "count": 3,
        "next": null,
        "previous": null,
        "results": [
            {
                "event_type": "power_on",
                "id": 58,
                "instance": "http://localhost:8080/api/v1/instance/34/",
                "instance_id": 34,
                "instance_type": "r4.large",
                "machineimage": "http://localhost:8080/api/v1/image/26/",
                "machineimage_id": 26,
                "occurred_at": "2019-01-14T00:00:00Z",
                "resourcetype": "AwsInstanceEvent",
                "subnet": "subnet-75ad3536",
                "url": "http://localhost:8080/api/v1/event/58/"
            },
            {
                "event_type": "power_off",
                "id": 59,
                "instance": "http://localhost:8080/api/v1/instance/34/",
                "instance_id": 34,
                "instance_type": "r4.large",
                "machineimage": null,
                "machineimage_id": null,
                "occurred_at": "2019-01-19T00:00:00Z",
                "resourcetype": "AwsInstanceEvent",
                "subnet": "subnet-75ad3536",
                "url": "http://localhost:8080/api/v1/event/59/"
            },
            {
                "event_type": "power_on",
                "id": 60,
                "instance": "http://localhost:8080/api/v1/instance/34/",
                "instance_id": 34,
                "instance_type": "r4.large",
                "machineimage": "http://localhost:8080/api/v1/image/26/",
                "machineimage_id": 26,
                "occurred_at": "2019-01-20T00:00:00Z",
                "resourcetype": "AwsInstanceEvent",
                "subnet": "subnet-75ad3536",
                "url": "http://localhost:8080/api/v1/event/60/"
            }
        ]
    }


You may include an optional "user_id" query string argument to filter results
down to a specific user.

Request:

.. code:: bash

    http localhost:8080/api/v1/event/ "${AUTH}" \
        user_id=="17"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, HEAD, OPTIONS
    Content-Length: 395
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "count": 1,
        "next": null,
        "previous": null,
        "results": [
            {
                "event_type": "power_on",
                "id": 57,
                "instance": "http://localhost:8080/api/v1/instance/33/",
                "instance_id": 33,
                "instance_type": "t2.medium",
                "machineimage": "http://localhost:8080/api/v1/image/25/",
                "machineimage_id": 25,
                "occurred_at": "2019-01-20T00:00:00Z",
                "resourcetype": "AwsInstanceEvent",
                "subnet": "subnet-89a905d9",
                "url": "http://localhost:8080/api/v1/event/57/"
            }
        ]
    }


Usage Reporting
---------------

Retrieve a daily instance usage report
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You may include an optional "user_id" query string argument to filter results
down to a specific user if your request is authenticated as a superuser.

You may include an optional "name_pattern" query string argument to filter
results down to activity under accounts whose names match at least one of the
words in that argument.

Request:

.. code:: bash

    http localhost:8080/api/v1/report/instances/ "${AUTH}" \
        start=="2019-01-18 00:00:00+00:00" \
        end=="2019-01-21 00:00:00+00:00"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, HEAD, OPTIONS
    Content-Length: 1028
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "daily_usage": [
            {
                "date": "2019-01-18T00:00:00Z",
                "openshift_images": 2,
                "openshift_instances": 2,
                "openshift_memory_seconds": 0.0,
                "openshift_runtime_seconds": 172800.0,
                "openshift_vcpu_seconds": 0.0,
                "rhel_images": 2,
                "rhel_instances": 2,
                "rhel_memory_seconds": 0.0,
                "rhel_runtime_seconds": 172800.0,
                "rhel_vcpu_seconds": 0.0
            },
            {
                "date": "2019-01-19T00:00:00Z",
                "openshift_images": 0,
                "openshift_instances": 0,
                "openshift_memory_seconds": 0.0,
                "openshift_runtime_seconds": 0.0,
                "openshift_vcpu_seconds": 0.0,
                "rhel_images": 0,
                "rhel_instances": 0,
                "rhel_memory_seconds": 0.0,
                "rhel_runtime_seconds": 0.0,
                "rhel_vcpu_seconds": 0.0
            },
            {
                "date": "2019-01-20T00:00:00Z",
                "openshift_images": 2,
                "openshift_instances": 2,
                "openshift_memory_seconds": 0.0,
                "openshift_runtime_seconds": 172800.0,
                "openshift_vcpu_seconds": 0.0,
                "rhel_images": 2,
                "rhel_instances": 2,
                "rhel_memory_seconds": 0.0,
                "rhel_runtime_seconds": 172800.0,
                "rhel_vcpu_seconds": 0.0
            }
        ],
        "instances_seen_with_openshift": 2,
        "instances_seen_with_openshift_challenged": 2,
        "instances_seen_with_rhel": 2,
        "instances_seen_with_rhel_challenged": 0
    }


Retrieve an account overview
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Request:

.. code:: bash

    http localhost:8080/api/v1/report/accounts/ "${AUTH}" \
        start=="2019-01-18 00:00:00+00:00" \
        end=="2019-01-21 00:00:00+00:00"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, HEAD, OPTIONS
    Content-Length: 1063
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "cloud_account_overviews": [
            {
                "arn": "arn:aws:iam::457240925779:role/role-for-cloudigrade",
                "cloud_account_id": "457240925779",
                "creation_date": "2019-01-07T00:00:00Z",
                "id": 26,
                "images": 2,
                "instances": 2,
                "name": "greatest account ever",
                "openshift_images_challenged": 2,
                "openshift_instances": 2,
                "openshift_memory_seconds": 0.0,
                "openshift_runtime_seconds": 345600.0,
                "openshift_vcpu_seconds": 0.0,
                "rhel_images_challenged": 0,
                "rhel_instances": 2,
                "rhel_memory_seconds": 0.0,
                "rhel_runtime_seconds": 345600.0,
                "rhel_vcpu_seconds": 0.0,
                "type": "aws",
                "user_id": 18
            },
            {
                "arn": "arn:aws:iam::692917929955:role/role-for-cloudigrade",
                "cloud_account_id": "692917929955",
                "creation_date": "2019-01-21T22:46:01.717898Z",
                "id": 27,
                "images": null,
                "instances": null,
                "name": "name updated using PUT",
                "openshift_images_challenged": null,
                "openshift_instances": null,
                "openshift_memory_seconds": null,
                "openshift_runtime_seconds": null,
                "openshift_vcpu_seconds": null,
                "rhel_images_challenged": null,
                "rhel_instances": null,
                "rhel_memory_seconds": null,
                "rhel_runtime_seconds": null,
                "rhel_vcpu_seconds": null,
                "type": "aws",
                "user_id": 18
            }
        ]
    }


If you attempt to retrieve cloud account overviews without specifying a
start and end date, you should get a 400 error.

Request:

.. code:: bash

    http localhost:8080/api/v1/report/accounts/ "${AUTH}"

Response:

::

    HTTP/1.1 400 Bad Request
    Allow: GET, HEAD, OPTIONS
    Content-Length: 71
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "end": [
            "This field is required."
        ],
        "start": [
            "This field is required."
        ]
    }


You may include an optional "name_pattern" query string argument to filter
results down to activity under accounts whose names match at least one of the
words in that argument.

You may include an optional "account_id" query string argument to filter
results down to activity for a specific clount (Cloud Account). This can be
combined with the "user_id" argument if the caller is a superuser to get
information specific to a different user.

In this example, an account named "greatest account ever" is included because
it contains the word "eat" even though it does not contain the word "tofu".

Request:

.. code:: bash

    http localhost:8080/api/v1/report/accounts/ "${AUTH}" \
        start=="2019-01-18 00:00:00+00:00" \
        end=="2019-01-21 00:00:00+00:00" \
        name_pattern=="eat tofu"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, HEAD, OPTIONS
    Content-Length: 535
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "cloud_account_overviews": [
            {
                "arn": "arn:aws:iam::457240925779:role/role-for-cloudigrade",
                "cloud_account_id": "457240925779",
                "creation_date": "2019-01-07T00:00:00Z",
                "id": 26,
                "images": 2,
                "instances": 2,
                "name": "greatest account ever",
                "openshift_images_challenged": 2,
                "openshift_instances": 2,
                "openshift_memory_seconds": 0.0,
                "openshift_runtime_seconds": 345600.0,
                "openshift_vcpu_seconds": 0.0,
                "rhel_images_challenged": 0,
                "rhel_instances": 2,
                "rhel_memory_seconds": 0.0,
                "rhel_runtime_seconds": 345600.0,
                "rhel_vcpu_seconds": 0.0,
                "type": "aws",
                "user_id": 18
            }
        ]
    }


Retrieve an account's active images overview
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The "start", "end", and "account_id" query string arguments are all required.
If authenticated as a superuser, you may include an optional "user_id" query
string argument to get the results for that user.

Request:

.. code:: bash

    http localhost:8080/api/v1/report/images/ "${AUTH}" \
        start=="2019-01-18 00:00:00+00:00" \
        end=="2019-01-21 00:00:00+00:00" \
        account_id=="26"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, HEAD, OPTIONS
    Content-Length: 728
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "images": [
            {
                "cloud_image_id": "ami-ebad71a3",
                "id": 26,
                "instances_seen": 1,
                "is_cloud_access": false,
                "is_encrypted": false,
                "is_marketplace": false,
                "memory_seconds": 0.0,
                "name": null,
                "openshift": true,
                "openshift_challenged": true,
                "openshift_detected": false,
                "rhel": true,
                "rhel_challenged": false,
                "rhel_detected": true,
                "runtime_seconds": 172800.0,
                "status": "inspected",
                "vcpu_seconds": 0.0
            },
            {
                "cloud_image_id": "ami-fae8bb2d",
                "id": 27,
                "instances_seen": 1,
                "is_cloud_access": false,
                "is_encrypted": false,
                "is_marketplace": false,
                "memory_seconds": 0.0,
                "name": null,
                "openshift": true,
                "openshift_challenged": true,
                "openshift_detected": false,
                "rhel": true,
                "rhel_challenged": false,
                "rhel_detected": true,
                "runtime_seconds": 172800.0,
                "status": "inspected",
                "vcpu_seconds": 0.0
            }
        ]
    }


User Info
---------------------

List all users
~~~~~~~~~~~~~~~~~

Request:

.. code:: bash

    http localhost:8080/api/v1/user/ "${AUTH}"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, HEAD, OPTIONS
    Content-Length: 201
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    [
        {
            "accounts": 1,
            "challenged_images": 1,
            "id": 17,
            "is_superuser": true,
            "username": "superuser@example.com"
        },
        {
            "accounts": 2,
            "challenged_images": 2,
            "id": 18,
            "is_superuser": false,
            "username": "customer@example.com"
        }
    ]


Retrieve a specific user
~~~~~~~~~~~~~~~~~~~~~~~~

Request:

.. code:: bash

    http localhost:8080/api/v1/user/18/ "${AUTH}"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, HEAD, OPTIONS
    Content-Length: 99
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "accounts": 2,
        "challenged_images": 2,
        "id": 18,
        "is_superuser": false,
        "username": "customer@example.com"
    }


Machine Images
--------------

List all images
~~~~~~~~~~~~~~~

Below command will return all images that have been seen used by any instance for any account belonging to the user that makes the request.

Request:

.. code:: bash

    http localhost:8080/api/v1/image/ "${AUTH}"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, HEAD, OPTIONS
    Content-Length: 1403
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "count": 2,
        "next": null,
        "previous": null,
        "results": [
            {
                "created_at": "2019-01-21T22:46:01.224173Z",
                "ec2_ami_id": "ami-ebad71a3",
                "id": 26,
                "inspection_json": "{\"rhel_enabled_repos_found\": true}",
                "is_cloud_access": false,
                "is_encrypted": false,
                "is_marketplace": false,
                "name": null,
                "openshift": true,
                "openshift_challenged": true,
                "openshift_detected": false,
                "owner_aws_account_id": "457240925779",
                "platform": "none",
                "resourcetype": "AwsMachineImage",
                "rhel": true,
                "rhel_challenged": false,
                "rhel_detected": true,
                "rhel_enabled_repos_found": true,
                "rhel_product_certs_found": false,
                "rhel_release_files_found": false,
                "rhel_signed_packages_found": false,
                "status": "inspected",
                "updated_at": "2019-01-21T22:46:01.311991Z",
                "url": "http://localhost:8080/api/v1/image/26/"
            },
            {
                "created_at": "2019-01-21T22:46:01.272858Z",
                "ec2_ami_id": "ami-fae8bb2d",
                "id": 27,
                "inspection_json": "{\"rhel_enabled_repos_found\": true}",
                "is_cloud_access": false,
                "is_encrypted": false,
                "is_marketplace": false,
                "name": null,
                "openshift": true,
                "openshift_challenged": true,
                "openshift_detected": false,
                "owner_aws_account_id": "457240925779",
                "platform": "none",
                "resourcetype": "AwsMachineImage",
                "rhel": true,
                "rhel_challenged": false,
                "rhel_detected": true,
                "rhel_enabled_repos_found": true,
                "rhel_product_certs_found": false,
                "rhel_release_files_found": false,
                "rhel_signed_packages_found": false,
                "status": "inspected",
                "updated_at": "2019-01-21T22:46:01.343433Z",
                "url": "http://localhost:8080/api/v1/image/27/"
            }
        ]
    }

When authenticating as a superuser, this will return all images used by instances in all accounts.

A superuser can also filter the images down to a those used by instances for accounts belonging to a specific user by using the optional
``user_id`` query string argument.

Request:

.. code:: bash

    http localhost:8080/api/v1/image/ "${AUTH}" \
        user_id=="17"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, HEAD, OPTIONS
    Content-Length: 727
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "count": 1,
        "next": null,
        "previous": null,
        "results": [
            {
                "created_at": "2019-01-21T22:46:01.165002Z",
                "ec2_ami_id": "ami-bff1b397",
                "id": 25,
                "inspection_json": "{\"rhel_enabled_repos_found\": true}",
                "is_cloud_access": false,
                "is_encrypted": false,
                "is_marketplace": false,
                "name": null,
                "openshift": true,
                "openshift_challenged": true,
                "openshift_detected": false,
                "owner_aws_account_id": "506347017895",
                "platform": "none",
                "resourcetype": "AwsMachineImage",
                "rhel": true,
                "rhel_challenged": false,
                "rhel_detected": true,
                "rhel_enabled_repos_found": true,
                "rhel_product_certs_found": false,
                "rhel_release_files_found": false,
                "rhel_signed_packages_found": false,
                "status": "inspected",
                "updated_at": "2019-01-21T22:46:01.303550Z",
                "url": "http://localhost:8080/api/v1/image/25/"
            }
        ]
    }


Retrieve a specific image
~~~~~~~~~~~~~~~~~~~~~~~~~

Request:

.. code:: bash

    http localhost:8080/api/v1/image/25/ "${AUTH}"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, PUT, PATCH, HEAD, OPTIONS
    Content-Length: 675
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "created_at": "2019-01-21T22:46:01.165002Z",
        "ec2_ami_id": "ami-bff1b397",
        "id": 25,
        "inspection_json": "{\"rhel_enabled_repos_found\": true}",
        "is_cloud_access": false,
        "is_encrypted": false,
        "is_marketplace": false,
        "name": null,
        "openshift": true,
        "openshift_challenged": true,
        "openshift_detected": false,
        "owner_aws_account_id": "506347017895",
        "platform": "none",
        "resourcetype": "AwsMachineImage",
        "rhel": true,
        "rhel_challenged": false,
        "rhel_detected": true,
        "rhel_enabled_repos_found": true,
        "rhel_product_certs_found": false,
        "rhel_release_files_found": false,
        "rhel_signed_packages_found": false,
        "status": "inspected",
        "updated_at": "2019-01-21T22:46:01.303550Z",
        "url": "http://localhost:8080/api/v1/image/25/"
    }


Issuing challenges/flags
~~~~~~~~~~~~~~~~~~~~~~~~

Note that ``resourcetype`` is required when making these calls.

Request:

.. code:: bash

    http patch localhost:8080/api/v1/image/25/ "${AUTH}" \
        rhel_challenged="True" \
        resourcetype="AwsMachineImage"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, PUT, PATCH, HEAD, OPTIONS
    Content-Length: 675
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "created_at": "2019-01-21T22:46:01.165002Z",
        "ec2_ami_id": "ami-bff1b397",
        "id": 25,
        "inspection_json": "{\"rhel_enabled_repos_found\": true}",
        "is_cloud_access": false,
        "is_encrypted": false,
        "is_marketplace": false,
        "name": null,
        "openshift": true,
        "openshift_challenged": true,
        "openshift_detected": false,
        "owner_aws_account_id": "506347017895",
        "platform": "none",
        "resourcetype": "AwsMachineImage",
        "rhel": false,
        "rhel_challenged": true,
        "rhel_detected": true,
        "rhel_enabled_repos_found": true,
        "rhel_product_certs_found": false,
        "rhel_release_files_found": false,
        "rhel_signed_packages_found": false,
        "status": "inspected",
        "updated_at": "2019-01-21T22:46:02.236367Z",
        "url": "http://localhost:8080/api/v1/image/25/"
    }

If you'd like to remove a challenge, simply send the same challenge with False as the value.

Request:

.. code:: bash

    http patch localhost:8080/api/v1/image/25/ "${AUTH}" \
        rhel_challenged="False" \
        resourcetype="AwsMachineImage"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, PUT, PATCH, HEAD, OPTIONS
    Content-Length: 675
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "created_at": "2019-01-21T22:46:01.165002Z",
        "ec2_ami_id": "ami-bff1b397",
        "id": 25,
        "inspection_json": "{\"rhel_enabled_repos_found\": true}",
        "is_cloud_access": false,
        "is_encrypted": false,
        "is_marketplace": false,
        "name": null,
        "openshift": true,
        "openshift_challenged": true,
        "openshift_detected": false,
        "owner_aws_account_id": "506347017895",
        "platform": "none",
        "resourcetype": "AwsMachineImage",
        "rhel": true,
        "rhel_challenged": false,
        "rhel_detected": true,
        "rhel_enabled_repos_found": true,
        "rhel_product_certs_found": false,
        "rhel_release_files_found": false,
        "rhel_signed_packages_found": false,
        "status": "inspected",
        "updated_at": "2019-01-21T22:46:02.253023Z",
        "url": "http://localhost:8080/api/v1/image/25/"
    }

You can challenge both at the same time.

Request:

.. code:: bash

    http patch localhost:8080/api/v1/image/25/ "${AUTH}" \
        rhel_challenged="True" \
        openshift_challenged="True" \
        resourcetype="AwsMachineImage"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, PUT, PATCH, HEAD, OPTIONS
    Content-Length: 675
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "created_at": "2019-01-21T22:46:01.165002Z",
        "ec2_ami_id": "ami-bff1b397",
        "id": 25,
        "inspection_json": "{\"rhel_enabled_repos_found\": true}",
        "is_cloud_access": false,
        "is_encrypted": false,
        "is_marketplace": false,
        "name": null,
        "openshift": true,
        "openshift_challenged": true,
        "openshift_detected": false,
        "owner_aws_account_id": "506347017895",
        "platform": "none",
        "resourcetype": "AwsMachineImage",
        "rhel": false,
        "rhel_challenged": true,
        "rhel_detected": true,
        "rhel_enabled_repos_found": true,
        "rhel_product_certs_found": false,
        "rhel_release_files_found": false,
        "rhel_signed_packages_found": false,
        "status": "inspected",
        "updated_at": "2019-01-21T22:46:02.270646Z",
        "url": "http://localhost:8080/api/v1/image/25/"
    }


Miscellaneous Commands
----------------------

Retrieve current publicly-viewable system configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The sysconfig endpoint includes the AWS cloud account id used by the application, AWS policies used for acting on behalf of customers, and the currently deployed backend version.

Request:

.. code:: bash

    http localhost:8080/api/v1/sysconfig/ "${AUTH}"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, HEAD, OPTIONS
    Content-Length: 585
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "aws_account_id": 57886362083,
        "aws_policies": {
            "traditional_inspection": {
                "Statement": [
                    {
                        "Action": [
                            "ec2:DescribeImages",
                            "ec2:DescribeInstances",
                            "ec2:ModifySnapshotAttribute",
                            "ec2:DescribeSnapshotAttribute",
                            "ec2:DescribeSnapshots",
                            "ec2:CopyImage",
                            "ec2:CreateTags",
                            "cloudtrail:CreateTrail",
                            "cloudtrail:UpdateTrail",
                            "cloudtrail:PutEventSelectors",
                            "cloudtrail:DescribeTrails",
                            "cloudtrail:StartLogging",
                            "cloudtrail:StopLogging"
                        ],
                        "Effect": "Allow",
                        "Resource": "*",
                        "Sid": "CloudigradePolicy"
                    }
                ],
                "Version": "2012-10-17"
            }
        },
        "version": "489-cloudigrade-version - d2b30c637ce3788e22990b21434bac2edcfb7ede"
    }

If the application was not deployed by gitlab-ci, the version will be returned as ``null``.

Request:

.. code:: bash

    http localhost:8080/api/v1/sysconfig/ "${AUTH}"

Response:

::

    HTTP/1.1 200 OK
    Allow: GET, HEAD, OPTIONS
    Content-Length: 521
    Content-Type: application/json
    Vary: Accept
    X-Frame-Options: SAMEORIGIN

    {
        "aws_account_id": 57886362083,
        "aws_policies": {
            "traditional_inspection": {
                "Statement": [
                    {
                        "Action": [
                            "ec2:DescribeImages",
                            "ec2:DescribeInstances",
                            "ec2:ModifySnapshotAttribute",
                            "ec2:DescribeSnapshotAttribute",
                            "ec2:DescribeSnapshots",
                            "ec2:CopyImage",
                            "ec2:CreateTags",
                            "cloudtrail:CreateTrail",
                            "cloudtrail:UpdateTrail",
                            "cloudtrail:PutEventSelectors",
                            "cloudtrail:DescribeTrails",
                            "cloudtrail:StartLogging",
                            "cloudtrail:StopLogging"
                        ],
                        "Effect": "Allow",
                        "Resource": "*",
                        "Sid": "CloudigradePolicy"
                    }
                ],
                "Version": "2012-10-17"
            }
        },
        "version": null
    }

If you attempt to retrieve sysconfig without authentication, you'll receive a 401 error.
